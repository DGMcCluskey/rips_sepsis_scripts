---
title: "Sepsis RNA array analysis"
format: html
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
```

# RNA array profiles of over 800 sepsis patients with varying survivor status Data from GSE65682 and https://www.sciencedirect.com/science/article/pii/S2213260017302941#cesec20

```{r}
library(GEOquery)
library(biomaRt)
library(limma)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ranger)
library(pROC)
```

```{r}
setwd("C:/Users/dan94/rips_project/")
```

```{r}

```
## LOADING IN DATA
### load in the expression matrix
### getGEO pulls directly from the GEO website
### take the first slot of the data containing the correct platform

```{r}
geo_data <- getGEO("GSE65682", GSEMatrix = T)
geo_data <- geo_data[[1]]
```

### extract the expression data and accompanying metadata
```{r}
exprs_df <- exprs(geo_data)
exprs_df <- data.frame(exprs_df)
exprs_df$probe_id <- rownames(exprs_df)
sample_data <- pData(geo_data)
```

## GETTING GENE NAMES FOR PROBES
### we access the gpl number from same page the geo object was obtained
### find the appropraite columns (ID and Gene symbol) and make a df
#### add this df to the exprs df
### changing gene's with two names and "///" to just the first name
### finally, to handle duplicate genes (presumably because an array can include multiple probes to the same gene) average them

```{r}
gpl <- getGEO("GPL13667")
head(Table(gpl))
probes <- data.frame(probe_id = Table(gpl)[["ID"]], gene_id = Table(gpl)[["Gene Symbol"]])

exprs_df <- merge(exprs_df, probes, by = "probe_id")
exprs_df <- exprs_df[, -1]
exprs_df$gene_id <- sub(" ///.*", "", exprs_df$gene_id)
exprs_df <- exprs_df %>%
  filter(!is.na(gene_id) & gene_id != "") %>%
  group_by(gene_id) %>%
  summarise(across(where(is.numeric), ~ mean(.x, na.rm = TRUE)), .groups = "drop")
#rownames(exprs_df) <- exprs_df$gene_id
```


## SETTING UP DATA
### transpose the expression df to have samples as a row
### this can then be merged with the metadata
### this results in a single df with each patient in a row, with their expression data and clinical info in the columns
```{r}
full_df <- pivot_longer(exprs_df, names_to = "sample_id", values_to = "expression", cols = 2:803)
full_df <- pivot_wider(full_df, names_from = gene_id, values_from = expression)
full_df <- as.data.frame(full_df)

sample_data$sample_id <- rownames(sample_data)
full_df <- merge(full_df, sample_data, by = "sample_id")
```

## PLOTTING GENE EXPRESSION

```{r}
ggplot(full_df, aes(x = `mortality_event_28days:ch1`, y = ETS2, fill = `endotype_cohort:ch1`))+geom_boxplot(outlier.shape = NA)+theme_bw()
```

## SAVE FULL DATAFRAME
```{r}
saveRDS(full_df, file = "sepsis_rna_array.rds", compress = F)
```

## RANDOM FOREST TO DISTINGUISH SAMPLES BY MORTALITY
### select only gene columns plus grouping variable of interest
### renaming mortality column for ease and removing old name
### make all gene columns numeric
### then make grouping variable a factor
```{r}
rf_data <- full_df[, c(3:11520,11564,11568,11571,11572)]
rf_data$mortality_28d <- rf_data$`mortality_event_28days:ch1`
rf_data <- rf_data[, -11521]
rf_data[, 1:11518] <- lapply(rf_data[, 1:11518], as.numeric)
rf_data[, 11519:11522] <- lapply(rf_data[, 11519:11522], as.factor)
rf_data <- filter(rf_data, mortality_28d %in% c("0","1"))
colnames(rf_data) <- sub("-", "_", colnames(rf_data))
colnames(rf_data) <- sub("@", "", colnames(rf_data))
colnames(rf_data) <- sub(" ", "", colnames(rf_data))
rf_data$mortality_28d <- droplevels(rf_data$mortality_28d)
```

## run random forest
```{r}
y <- rf_data$mortality_28d
x <- rf_data[, -11522]

set.seed(61)
rf_model <- rf_model <- ranger(
  x = x, y = y, 
  num.trees = 5000,
  importance = "permutation",
  probability = TRUE,                    # needed for ROC/AUC
  class.weights = c("0" = 1, "1" = 4)  # weight minority class
)
```

## model diagnostics
```{r}
rf_model
rf_pred <- rf_model$predictions[, "1"]
roc_obj <- roc(rf_data$mortality_28d, rf_pred)
plot(roc_obj, col = "blue", lwd = 2, main = "ROC Curve - Ranger RF")
auc_val <- auc(roc_obj)
print(auc_val)
```

## View important features (interactions)
```{r}
vi_df <- data.frame(
  Gene = names(rf_model$variable.importance),
  Importance = rf_model$variable.importance
)

ggplot(vi_df[order(vi_df$Importance, decreasing = TRUE)[1:20], ], 
       aes(x = reorder(Gene, Importance), y = Importance, fill = Importance)) +
  geom_point(shape = 21, size = 6)+
  coord_flip() +
  labs(title = "Top 20 Important Genes", x = "", y = "Importance")+
  theme_bw()+theme(axis.text = element_text(size = 14, colour = "black"))+
  scale_fill_viridis_c()
```

## boxplots of specific interactions and stats
```{r}
interactions_plot <- pivot_longer(rf_data, names_to = "interaction", values_to = "prob", 1:11518)
top_features <- vi_df[order(vi_df$Importance, decreasing = TRUE)[1:20],]
interactions_plot <- filter(interactions_plot, interaction %in% top_features$Gene)
options(scipen = 999)
interactions_plot$mortality_28d <- factor(interactions_plot$mortality_28d, levels = c("1", "0"),
                                          labels = c("Non-survival", "Survival"))

ggplot(interactions_plot, aes(x = mortality_28d, y = prob, fill = mortality_28d))+
  geom_boxplot(outlier.shape = NA, alpha = 0.4, colour = "black")+
  geom_jitter(width = 0.1, shape = 21, colour = "black", size = 2)+
  theme_bw()+
  facet_wrap(~interaction, scales = "free_y", ncol = 4)+
  scale_fill_manual(values = c("darkorchid", "mediumseagreen"))+
  xlab(NULL)+
  theme(axis.text = element_text(size = 12, colour = "black"))

results <- interactions_plot %>%
  group_by(interaction) %>%
  summarise(
    p_value = wilcox.test(prob ~ mortality_28d)$p.value,
    .groups = "drop"
  ) %>%
  arrange(p_value)
```